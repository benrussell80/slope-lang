use std::fmt::{Display, Formatter, self};


#[derive(Debug, PartialEq, Clone)]
pub enum Token {
    Illegal(String),
    Eof,
    Identifier(String),
    Real(f64),
    Integer(i64),
    Plus,
    Minus,
    Exponent,
    Division,
    Multiply,
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftSquareBracket,
    RightSquareBracket,
    Comma,
    Semicolon,
    And,
    Or,
    Xor,
    True,
    False,
    Colon,
    If,
    Else,
    Modulo,
    Undefined,
    Assign,
    Equals,
    NotEquals,
    LessThan,
    LessThanEquals,
    GreaterThan,
    GreaterThanEquals,
    Not,
    Let,
    FuncFn,
    PlusMinus,
    MinusPlus,
    As,
    Question,
    In,
    Bang,
    Imaginary,
}

impl Display for Token {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        use Token::*;
        match self {
            Illegal(value) => write!(f, "{}", value),
            Eof => write!(f, "EOF"),
            Identifier(value) => write!(f, "{}", value),
            Real(value) => write!(f, "{}", value),
            Integer(value) => write!(f, "{}", value),
            Plus => write!(f, "+"),
            Minus => write!(f, "-"),
            Exponent => write!(f, "^"),
            Division => write!(f, "/"),
            Multiply => write!(f, "*"),
            LeftParen => write!(f, "("),
            RightParen => write!(f, ")"),
            LeftBrace => write!(f, "{{"),
            RightBrace => write!(f, "}}"),
            LeftSquareBracket => write!(f, "["),
            RightSquareBracket => write!(f, "]"),
            Comma => write!(f, ","),
            Semicolon => write!(f, ";"),
            And => write!(f, "and"),
            Or => write!(f, "or"),
            Xor => write!(f, "xor"),
            True => write!(f, "true"),
            False => write!(f, "false"),
            Colon => write!(f, ":"),
            If => write!(f, "if"),
            Else => write!(f, "else"),
            Modulo => write!(f, "%"),
            Undefined => write!(f, "undefined"),
            Assign => write!(f, "="),
            Equals => write!(f, "=="),
            NotEquals => write!(f, "=/="),
            LessThan => write!(f, "<"),
            LessThanEquals => write!(f, "<="),
            GreaterThan => write!(f, ">"),
            GreaterThanEquals => write!(f, ">="),
            Not => write!(f, "not"),
            Let => write!(f, "let"),
            FuncFn => write!(f, "fn"),
            PlusMinus => write!(f, "+/-"),
            MinusPlus => write!(f, "-/+"),
            As => write!(f, "as"),
            Question => write!(f, "?"),
            In => write!(f, "in"),
            Bang => write!(f, "!"),
            Imaginary => write!(f, "i"),
        }
    }
}
